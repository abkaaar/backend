// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  SUPER_ADMIN
  STAFF
  STUDENT
}

model User {
  id                     String    @id @default(uuid())
  email                  String?   @unique // Super-admin and staff use email
  password               String?
  role                   Role      @default(SUPER_ADMIN)
  verificationCode       String?
  verificationCodeExpire DateTime?
  student                Student? // Relation for student details
  staff                  Staff? // Relation for staff details
  createdAt              DateTime  @default(now())

  passwordResetToken       String?  
  passwordResetTokenExpire DateTime? 
}

model Student {
  id             String     @id @default(uuid())
  userId         String     @unique
  name           String
  user           User       @relation(fields: [userId], references: [id])
  matricNo       String     @unique // Used for login
  phoneNumber    String     @unique // Used for login
  department     Department @relation(fields: [departmentName], references: [name])
  departmentName String
  clearance      Clearance?
  payments       Payment[]
}

model Staff {
  id             String     @id @default(uuid())
  userId         String     @unique
  name           String
  user           User       @relation(fields: [userId], references: [id])
  position       String?
  department     Department @relation(fields: [departmentName], references: [name])
  departmentName String
  approvals      Approval[]
}

model Department {
  id          String     @id @default(uuid())
  name        String     @unique
  students    Student[]
  staffs      Staff[]
  approvals   Approval[]
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum ClearanceStatus {
  PENDING
  APPROVED
  REJECTED
}

model Clearance {
  id        String          @id @default(uuid())
  student   Student         @relation(fields: [studentId], references: [id])
  studentId String          @unique
  status    ClearanceStatus @default(PENDING)
  approvals Approval[]
  payments  Payment[]
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Approval {
  id           String         @id @default(uuid())
  staff        Staff?          @relation(fields: [staffId], references: [id])
  staffId      String?
  clearance    Clearance      @relation(fields: [clearanceId], references: [id])
  clearanceId  String
  department   Department     @relation(fields: [departmentId], references: [id])
  departmentId String
  status       ApprovalStatus @default(PENDING)
  comment      String?
  createdAt    DateTime       @default(now())
  updatedAt     DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Payment {
  id          String        @id @default(uuid())
  student     Student       @relation(fields: [studentId], references: [id])
  studentId   String
  clearance   Clearance     @relation(fields: [clearanceId], references: [id])
  clearanceId String
  amount      Float
  reference   String     @unique // Unique reference for the payment
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt
}
